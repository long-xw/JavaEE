<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--SpringMVC思想是 有一个 前端控制器能拦截所有要求，并智能派发；
        这个前端控制器是一个Servlet，应该在web.xml中配置这个servlet来拦截所有请求
    -->
    <!-- The front controller of this Spring Web application
    responsible for handing all application requests-->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfig</param-name>
            <param-value>classpath:springDispatcherServlet-servlet.xml</param-value>
        </init-param>
        <!-- servlet启动加载，servlet原本是第一次访问创建对象，
        load-on-startup:服务器启动的时候创建对象，值越小优先级越高，越先创建对象，
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!--Map all requests to the DispatcherServlet for handing -->
    <!-- *.do       *.action        *.haha-->
    <!--
        /   拦截所有请求，不拦截jsp页面，*.jsp请求
        /*  拦截所有请求，拦截jsp页面， *.jsp请求
        处理*.jsp是tomcat做的事 所有项目的小web.xml都是继承大web.xml
        DefaultServlet是tomcat中处理静态资源的？
            除jsp 和 servlet外剩下的都是静态资源
            index.html 静态资源 tomcat就会在服务器下找到这个资源并返回
        1) 服务器的大web.xml中有一个DefaultServlet是url-pattern=/
        2) 我们的配置中前端控制器是url-pattern=/
            静态资源会来到DispatcherServlet（前端控制器） 看哪个方法的RequestMapping是这个index.html
        3) 为什么jsp页面可以访问？ 因为我们没有覆盖服务器中的JspServlet的配置
        4) /*   直接拦截所有请求：我们写/ 也是为了迎合后来Rest风格的URL地址

    -->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- /*和/都是拦截所有请求 /：会拦截所有请求，但是不会拦截
            /*的范围更大；还会拦截到*.jsp这些请求，一旦拦截jsp页面就不能显示了，
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--encoding:指定解决post请求乱码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--forceEncoding:解决响应乱码-->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>